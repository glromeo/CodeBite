"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWebSockets = void 0;
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = require("fs");
const path_1 = require("path");
const tiny_node_logger_1 = __importDefault(require("tiny-node-logger"));
const ws_1 = __importDefault(require("ws"));
const esnext_web_modules_1 = require("esnext-web-modules");
const WS_CONFIG_FILE = "websockets.config.js";
function createWebSockets(config, server, watcher) {
    const wss = new ws_1.default.Server({ noServer: true });
    server.on("upgrade", (req, socket, head) => {
        if (req.headers["sec-websocket-protocol"] !== "esm-hmr") {
            wss.handleUpgrade(req, socket, head, (client) => {
                wss.emit("connection", client, req);
            });
        }
    });
    const listeners = new Map();
    function on(name, listener) {
        listeners.set(name, listener);
        tiny_node_logger_1.default.debug("added message listener:", chalk_1.default.magenta(name));
    }
    watcher.on("all", async function (event, path) {
        if (path.endsWith(WS_CONFIG_FILE)) {
            const module = path_1.resolve(config.rootDir, path);
            const context = {
                dirname: path_1.dirname(module),
                filename: module
            };
            delete require.cache[require.resolve(module)];
            tiny_node_logger_1.default.info("websockets:", chalk_1.default.underline(module));
            require(module).call(context, config, watcher, on);
        }
    });
    for (const basedir of Object.values(config.mount)) {
        const filename = path_1.resolve(config.rootDir, basedir, WS_CONFIG_FILE);
        if (fs_1.existsSync(filename)) {
            watcher.add(filename);
        }
    }
    function marshall(header, payload) {
        return payload ? `${header}:${JSON.stringify(payload)}` : header;
    }
    function unmarshall(message) {
        const sep = message.indexOf(":");
        let header, payload;
        if (sep !== -1) {
            header = message.substring(0, sep);
            payload = JSON.parse(message.substring(sep + 1));
        }
        else {
            header = message;
        }
        tiny_node_logger_1.default.debug("ws:", header, message.length < 250 ? payload : `{...}`);
        return { header, payload };
    }
    const clients = new Set();
    wss.on("connection", ws => {
        ws.on("message", message => {
            const { header, payload } = unmarshall(message);
            const listener = listeners.get(header);
            if (listener) {
                listener.call(listeners, payload, (header, payload) => ws.send(marshall(header, payload)));
            }
        });
        ws.send("connected:" + JSON.stringify({ since: new Date().toUTCString() }));
        clients.add(ws);
        ws.on("close", function () {
            clients.delete(ws);
        });
    });
    function broadcast(header, payload) {
        let message = marshall(header, payload);
        for (const client of clients) {
            client.send(message);
        }
    }
    esnext_web_modules_1.notifications.on("new", (notification) => {
        broadcast("notification:new", notification);
    });
    esnext_web_modules_1.notifications.on("update", (notification) => {
        broadcast("notification:update", notification);
    });
}
exports.createWebSockets = createWebSockets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic29ja2V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy93ZWJzb2NrZXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUMxQiwyQkFBOEI7QUFDOUIsK0JBQXNDO0FBQ3RDLHdFQUFtQztBQUNuQyw0Q0FBMkI7QUFDM0IsMkRBQXdGO0FBRXhGLE1BQU0sY0FBYyxHQUFHLHNCQUFzQixDQUFDO0FBRTlDLFNBQWdCLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTztJQUVwRCxNQUFNLEdBQUcsR0FBRyxJQUFJLFlBQVMsQ0FBQyxNQUFNLENBQUMsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUVuRCxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDdkMsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLEtBQUssU0FBUyxFQUFFO1lBQ3JELEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDNUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3hDLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFFNUIsU0FBUyxFQUFFLENBQUMsSUFBSSxFQUFFLFFBQVE7UUFDdEIsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUIsMEJBQUcsQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsZUFBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRCxPQUFP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QUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM5RjtRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFDLEtBQUssRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFaEIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUU7WUFDWCxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLFNBQVMsQ0FBQyxNQUFhLEVBQUUsT0FBVztRQUN6QyxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEI7SUFDTCxDQUFDO0lBRUQsa0NBQWEsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsWUFBbUMsRUFBRSxFQUFFO1FBQzVELFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUMsQ0FBQztJQUVILGtDQUFhLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFlBQW1DLEVBQUUsRUFBRTtRQUMvRCxTQUFTLENBQUMscUJBQXFCLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBOUZELDRDQThGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFsayBmcm9tIFwiY2hhbGtcIjtcclxuaW1wb3J0IHtleGlzdHNTeW5jfSBmcm9tIFwiZnNcIjtcclxuaW1wb3J0IHtkaXJuYW1lLCByZXNvbHZlfSBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgbG9nIGZyb20gXCJ0aW55LW5vZGUtbG9nZ2VyXCI7XHJcbmltcG9ydCBXZWJTb2NrZXQgZnJvbSBcIndzXCI7XHJcbmltcG9ydCB7dXNlV2ViTW9kdWxlcywgbm90aWZpY2F0aW9ucywgV2ViTW9kdWxlc05vdGlmaWNhdGlvbn0gZnJvbSBcImVzbmV4dC13ZWItbW9kdWxlc1wiO1xyXG5cclxuY29uc3QgV1NfQ09ORklHX0ZJTEUgPSBcIndlYnNvY2tldHMuY29uZmlnLmpzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlV2ViU29ja2V0cyhjb25maWcsIHNlcnZlciwgd2F0Y2hlcikge1xyXG5cclxuICAgIGNvbnN0IHdzcyA9IG5ldyBXZWJTb2NrZXQuU2VydmVyKHtub1NlcnZlcjogdHJ1ZX0pO1xyXG5cclxuICAgIHNlcnZlci5vbihcInVwZ3JhZGVcIiwgKHJlcSwgc29ja2V0LCBoZWFkKSA9PiB7XHJcbiAgICAgICAgaWYgKHJlcS5oZWFkZXJzW1wic2VjLXdlYnNvY2tldC1wcm90b2NvbFwiXSAhPT0gXCJlc20taG1yXCIpIHtcclxuICAgICAgICAgICAgd3NzLmhhbmRsZVVwZ3JhZGUocmVxLCBzb2NrZXQsIGhlYWQsIChjbGllbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHdzcy5lbWl0KFwiY29ubmVjdGlvblwiLCBjbGllbnQsIHJlcSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGxpc3RlbmVycyA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBvbihuYW1lLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIGxpc3RlbmVycy5zZXQobmFtZSwgbGlzdGVuZXIpO1xyXG4gICAgICAgIGxvZy5kZWJ1ZyhcImFkZGVkIG1lc3NhZ2UgbGlzdGVuZXI6XCIsIGNoYWxrLm1hZ2VudGEobmFtZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHdhdGNoZXIub24oXCJhbGxcIiwgYXN5bmMgZnVuY3Rpb24gKGV2ZW50LCBwYXRoKSB7XHJcblxyXG4gICAgICAgIGlmIChwYXRoLmVuZHNXaXRoKFdTX0NPTkZJR19GSUxFKSkge1xyXG4gICAgICAgICAgICBjb25zdCBtb2R1bGUgPSByZXNvbHZlKGNvbmZpZy5yb290RGlyLCBwYXRoKTtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgICAgIGRpcm5hbWU6IGRpcm5hbWUobW9kdWxlKSxcclxuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBtb2R1bGVcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGRlbGV0ZSByZXF1aXJlLmNhY2hlW3JlcXVpcmUucmVzb2x2ZShtb2R1bGUpXTtcclxuXHJcbiAgICAgICAgICAgIGxvZy5pbmZvKFwid2Vic29ja2V0czpcIiwgY2hhbGsudW5kZXJsaW5lKG1vZHVsZSkpO1xyXG4gICAgICAgICAgICByZXF1aXJlKG1vZHVsZSkuY2FsbChjb250ZXh0LCBjb25maWcsIHdhdGNoZXIsIG9uKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGJhc2VkaXIgb2YgT2JqZWN0LnZhbHVlczxzdHJpbmc+KGNvbmZpZy5tb3VudCkpIHtcclxuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IHJlc29sdmUoY29uZmlnLnJvb3REaXIsIGJhc2VkaXIsIFdTX0NPTkZJR19GSUxFKTtcclxuICAgICAgICBpZiAoZXhpc3RzU3luYyhmaWxlbmFtZSkpIHtcclxuICAgICAgICAgICAgd2F0Y2hlci5hZGQoZmlsZW5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYXJzaGFsbChoZWFkZXI6c3RyaW5nLCBwYXlsb2FkOmFueSkge1xyXG4gICAgICAgIHJldHVybiBwYXlsb2FkID8gYCR7aGVhZGVyfToke0pTT04uc3RyaW5naWZ5KHBheWxvYWQpfWAgOiBoZWFkZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW5tYXJzaGFsbChtZXNzYWdlKSB7XHJcbiAgICAgICAgY29uc3Qgc2VwID0gbWVzc2FnZS5pbmRleE9mKFwiOlwiKTtcclxuICAgICAgICBsZXQgaGVhZGVyLCBwYXlsb2FkO1xyXG4gICAgICAgIGlmIChzZXAgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGhlYWRlciA9IG1lc3NhZ2Uuc3Vic3RyaW5nKDAsIHNlcCk7XHJcbiAgICAgICAgICAgIHBheWxvYWQgPSBKU09OLnBhcnNlKG1lc3NhZ2Uuc3Vic3RyaW5nKHNlcCArIDEpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBoZWFkZXIgPSBtZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2cuZGVidWcoXCJ3czpcIiwgaGVhZGVyLCBtZXNzYWdlLmxlbmd0aCA8IDI1MCA/IHBheWxvYWQgOiBgey4uLn1gKTtcclxuICAgICAgICByZXR1cm4ge2hlYWRlciwgcGF5bG9hZH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2xpZW50cyA9IG5ldyBTZXQ8V2ViU29ja2V0PigpO1xyXG5cclxuICAgIHdzcy5vbihcImNvbm5lY3Rpb25cIiwgd3MgPT4ge1xyXG5cclxuICAgICAgICB3cy5vbihcIm1lc3NhZ2VcIiwgbWVzc2FnZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHtoZWFkZXIsIHBheWxvYWR9ID0gdW5tYXJzaGFsbChtZXNzYWdlKTtcclxuICAgICAgICAgICAgY29uc3QgbGlzdGVuZXIgPSBsaXN0ZW5lcnMuZ2V0KGhlYWRlcik7XHJcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbChsaXN0ZW5lcnMsIHBheWxvYWQsIChoZWFkZXIsIHBheWxvYWQpID0+IHdzLnNlbmQobWFyc2hhbGwoaGVhZGVyLCBwYXlsb2FkKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHdzLnNlbmQoXCJjb25uZWN0ZWQ6XCIgKyBKU09OLnN0cmluZ2lmeSh7c2luY2U6IG5ldyBEYXRlKCkudG9VVENTdHJpbmcoKX0pKTtcclxuXHJcbiAgICAgICAgY2xpZW50cy5hZGQod3MpO1xyXG5cclxuICAgICAgICB3cy5vbihcImNsb3NlXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY2xpZW50cy5kZWxldGUod3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gYnJvYWRjYXN0KGhlYWRlcjpzdHJpbmcsIHBheWxvYWQ6YW55KSB7XHJcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBtYXJzaGFsbChoZWFkZXIsIHBheWxvYWQpO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2xpZW50IG9mIGNsaWVudHMpIHtcclxuICAgICAgICAgICAgY2xpZW50LnNlbmQobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5vdGlmaWNhdGlvbnMub24oXCJuZXdcIiwgKG5vdGlmaWNhdGlvbjpXZWJNb2R1bGVzTm90aWZpY2F0aW9uKSA9PiB7XHJcbiAgICAgICAgYnJvYWRjYXN0KFwibm90aWZpY2F0aW9uOm5ld1wiLCBub3RpZmljYXRpb24pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgbm90aWZpY2F0aW9ucy5vbihcInVwZGF0ZVwiLCAobm90aWZpY2F0aW9uOldlYk1vZHVsZXNOb3RpZmljYXRpb24pID0+IHtcclxuICAgICAgICBicm9hZGNhc3QoXCJub3RpZmljYXRpb246dXBkYXRlXCIsIG5vdGlmaWNhdGlvbik7XHJcbiAgICB9KTtcclxufVxyXG4iXX0=