"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServer = exports.DEFAULT_SERVER_OPTIONS = void 0;
const tiny_node_logger_1 = __importDefault(require("tiny-node-logger"));
const messaging_1 = require("./messaging");
const request_handler_1 = require("./request-handler");
const watcher_1 = require("./watcher");
exports.DEFAULT_SERVER_OPTIONS = {
    protocol: "http",
    host: "localhost",
    port: 3000
};
async function startServer(options) {
    const { server: { protocol, host, port, options: { key, cert, allowHTTP1 } = {} } = exports.DEFAULT_SERVER_OPTIONS } = options;
    const watcher = watcher_1.useWatcher(options);
    const handler = request_handler_1.useRequestHandler(options);
    let module, server;
    if (options.http2) {
        module = require("http2");
        if (protocol === "http") {
            server = module.createServer({ allowHTTP1 }, handler);
        }
        else {
            server = module.createSecureServer({ key, cert, allowHTTP1 }, handler);
        }
    }
    else {
        if (protocol === "http") {
            module = require("http");
            server = module.createServer(handler);
        }
        else {
            module = require("https");
            server = module.createServer({ key, cert }, handler);
        }
    }
    server.on("upgrade", messaging_1.useMessaging(options).handleUpgrade);
    await new Promise(listening => server.listen(port, host, listening));
    const address = `${protocol}://${host}:${port}`;
    tiny_node_logger_1.default.info(`server started on ${address}`);
    const sockets = new Set();
    for (const event of ["connection", "secureConnection"])
        server.on(event, function (socket) {
            sockets.add(socket);
            socket.on("close", () => sockets.delete(socket));
        });
    let closed;
    async function shutdown() {
        if (closed) {
            tiny_node_logger_1.default.debug("shutdown in progress...");
            await closed;
        }
        closed = new Promise(closed => server.on("close", closed));
        if (sockets.size > 0) {
            tiny_node_logger_1.default.debug(`closing ${sockets.size} pending socket...`);
            for (const socket of sockets) {
                socket.destroy();
                sockets.delete(socket);
            }
        }
        tiny_node_logger_1.default.debug(`closing chokidar watcher...`);
        await watcher.close();
        server.close();
        await closed;
        tiny_node_logger_1.default.info("server closed");
        return closed;
    }
    return {
        config: options,
        module,
        server,
        watcher,
        handler,
        address,
        shutdown
    };
}
exports.startServer = startServer;
//# sourceMappingURL=data:application/json;base64,